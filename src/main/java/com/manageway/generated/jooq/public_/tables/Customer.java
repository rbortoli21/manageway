/*
 * This file is generated by jOOQ.
 */
package com.manageway.generated.jooq.public_.tables;


import com.manageway.generated.jooq.public_.Indexes;
import com.manageway.generated.jooq.public_.Keys;
import com.manageway.generated.jooq.public_.Public;
import com.manageway.generated.jooq.public_.tables.EmployeeCustomers.EmployeeCustomersPath;
import com.manageway.generated.jooq.public_.tables.Project.ProjectPath;
import com.manageway.generated.jooq.public_.tables.Users.UsersPath;
import com.manageway.generated.jooq.public_.tables.records.CustomerRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.UUID;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Customer extends TableImpl<CustomerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.customer</code>
     */
    public static final Customer CUSTOMER = new Customer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerRecord> getRecordType() {
        return CustomerRecord.class;
    }

    /**
     * The column <code>public.customer.id</code>.
     */
    public final TableField<CustomerRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.customer.user_id</code>.
     */
    public final TableField<CustomerRecord, UUID> USER_ID = createField(DSL.name("user_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.customer.created_at</code>.
     */
    public final TableField<CustomerRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.customer.updated_at</code>.
     */
    public final TableField<CustomerRecord, LocalDateTime> UPDATED_AT = createField(DSL.name("updated_at"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.customer.tenant_id</code>.
     */
    public final TableField<CustomerRecord, UUID> TENANT_ID = createField(DSL.name("tenant_id"), SQLDataType.UUID, this, "");

    private Customer(Name alias, Table<CustomerRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Customer(Name alias, Table<CustomerRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    public Customer(String alias) {
        this(DSL.name(alias), CUSTOMER);
    }

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    public Customer(Name alias) {
        this(alias, CUSTOMER);
    }

    /**
     * Create a <code>public.customer</code> table reference
     */
    public Customer() {
        this(DSL.name("customer"), null);
    }

    public <O extends Record> Customer(Table<O> path, ForeignKey<O, CustomerRecord> childPath, InverseForeignKey<O, CustomerRecord> parentPath) {
        super(path, childPath, parentPath, CUSTOMER);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CustomerPath extends Customer implements Path<CustomerRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CustomerPath(Table<O> path, ForeignKey<O, CustomerRecord> childPath, InverseForeignKey<O, CustomerRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CustomerPath(Name alias, Table<CustomerRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CustomerPath as(String alias) {
            return new CustomerPath(DSL.name(alias), this);
        }

        @Override
        public CustomerPath as(Name alias) {
            return new CustomerPath(alias, this);
        }

        @Override
        public CustomerPath as(Table<?> alias) {
            return new CustomerPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.IDX_CUSTOMER_TENANT_ID);
    }

    @Override
    public UniqueKey<CustomerRecord> getPrimaryKey() {
        return Keys.CUSTOMER_PKEY;
    }

    @Override
    public List<ForeignKey<CustomerRecord, ?>> getReferences() {
        return Arrays.asList(Keys.CUSTOMER__FK_CUSTOMER_USER);
    }

    private transient UsersPath _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public UsersPath users() {
        if (_users == null)
            _users = new UsersPath(this, Keys.CUSTOMER__FK_CUSTOMER_USER, null);

        return _users;
    }

    private transient EmployeeCustomersPath _employeeCustomers;

    /**
     * Get the implicit to-many join path to the
     * <code>public.employee_customers</code> table
     */
    public EmployeeCustomersPath employeeCustomers() {
        if (_employeeCustomers == null)
            _employeeCustomers = new EmployeeCustomersPath(this, null, Keys.EMPLOYEE_CUSTOMERS__FK_EMPLOYEE_CUSTOMERS_CUSTOMER.getInverseKey());

        return _employeeCustomers;
    }

    private transient ProjectPath _project;

    /**
     * Get the implicit to-many join path to the <code>public.project</code>
     * table
     */
    public ProjectPath project() {
        if (_project == null)
            _project = new ProjectPath(this, null, Keys.PROJECT__FK_PROJECT_CUSTOMER.getInverseKey());

        return _project;
    }

    @Override
    public Customer as(String alias) {
        return new Customer(DSL.name(alias), this);
    }

    @Override
    public Customer as(Name alias) {
        return new Customer(alias, this);
    }

    @Override
    public Customer as(Table<?> alias) {
        return new Customer(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(String name) {
        return new Customer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Name name) {
        return new Customer(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customer rename(Table<?> name) {
        return new Customer(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Condition condition) {
        return new Customer(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Customer where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Customer whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
