/*
 * This file is generated by jOOQ.
 */
package com.manageway.jooq.pg_catalog.tables.records;


import com.manageway.jooq.pg_catalog.tables.PgStatBgwriter;

import java.time.OffsetDateTime;

import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class PgStatBgwriterRecord extends TableRecordImpl<PgStatBgwriterRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_timed</code>.
     */
    public void setCheckpointsTimed(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_timed</code>.
     */
    public Long getCheckpointsTimed() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_req</code>.
     */
    public void setCheckpointsReq(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.checkpoints_req</code>.
     */
    public Long getCheckpointsReq() {
        return (Long) get(1);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_bgwriter.checkpoint_write_time</code>.
     */
    public void setCheckpointWriteTime(Double value) {
        set(2, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_bgwriter.checkpoint_write_time</code>.
     */
    public Double getCheckpointWriteTime() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.checkpoint_sync_time</code>.
     */
    public void setCheckpointSyncTime(Double value) {
        set(3, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.checkpoint_sync_time</code>.
     */
    public Double getCheckpointSyncTime() {
        return (Double) get(3);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_checkpoint</code>.
     */
    public void setBuffersCheckpoint(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_checkpoint</code>.
     */
    public Long getBuffersCheckpoint() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_clean</code>.
     */
    public void setBuffersClean(Long value) {
        set(5, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_clean</code>.
     */
    public Long getBuffersClean() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.maxwritten_clean</code>.
     */
    public void setMaxwrittenClean(Long value) {
        set(6, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.maxwritten_clean</code>.
     */
    public Long getMaxwrittenClean() {
        return (Long) get(6);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_backend</code>.
     */
    public void setBuffersBackend(Long value) {
        set(7, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_backend</code>.
     */
    public Long getBuffersBackend() {
        return (Long) get(7);
    }

    /**
     * Setter for
     * <code>pg_catalog.pg_stat_bgwriter.buffers_backend_fsync</code>.
     */
    public void setBuffersBackendFsync(Long value) {
        set(8, value);
    }

    /**
     * Getter for
     * <code>pg_catalog.pg_stat_bgwriter.buffers_backend_fsync</code>.
     */
    public Long getBuffersBackendFsync() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.buffers_alloc</code>.
     */
    public void setBuffersAlloc(Long value) {
        set(9, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.buffers_alloc</code>.
     */
    public Long getBuffersAlloc() {
        return (Long) get(9);
    }

    /**
     * Setter for <code>pg_catalog.pg_stat_bgwriter.stats_reset</code>.
     */
    public void setStatsReset(OffsetDateTime value) {
        set(10, value);
    }

    /**
     * Getter for <code>pg_catalog.pg_stat_bgwriter.stats_reset</code>.
     */
    public OffsetDateTime getStatsReset() {
        return (OffsetDateTime) get(10);
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PgStatBgwriterRecord
     */
    public PgStatBgwriterRecord() {
        super(PgStatBgwriter.PG_STAT_BGWRITER);
    }

    /**
     * Create a detached, initialised PgStatBgwriterRecord
     */
    public PgStatBgwriterRecord(Long checkpointsTimed, Long checkpointsReq, Double checkpointWriteTime, Double checkpointSyncTime, Long buffersCheckpoint, Long buffersClean, Long maxwrittenClean, Long buffersBackend, Long buffersBackendFsync, Long buffersAlloc, OffsetDateTime statsReset) {
        super(PgStatBgwriter.PG_STAT_BGWRITER);

        setCheckpointsTimed(checkpointsTimed);
        setCheckpointsReq(checkpointsReq);
        setCheckpointWriteTime(checkpointWriteTime);
        setCheckpointSyncTime(checkpointSyncTime);
        setBuffersCheckpoint(buffersCheckpoint);
        setBuffersClean(buffersClean);
        setMaxwrittenClean(maxwrittenClean);
        setBuffersBackend(buffersBackend);
        setBuffersBackendFsync(buffersBackendFsync);
        setBuffersAlloc(buffersAlloc);
        setStatsReset(statsReset);
        resetChangedOnNotNull();
    }
}
